JavaScript:
let having block scope and can be updated but cannot be redeclared.
var having global scope and can be updated and redeclared.
const cannot be redeclared and updated.
Variables are declared with the var keyword.
Undefined represents undefined value
Null represents null i.e. no value at all
typeof(a)  =>type of variable.
== check value and === check data type and value.
swith(exp){
case 'exp1':code
break;
case 'exp2':code
break;
default:code
}

Array Methods:
array.length
array.sort();
array.push('new_element');  // add element to last.
array.pop();  //removes last element.
array.shift(); remove first element.
array.unshift('');//add item at start.
array.reverse(); // reverse order of array elements.
Array.isArray(array_name); // check whether object is array or not.
arr1.concat(arr2);   // join two array.
array.indexOf('element');  // get index of element.

Prompt:
A prompt box is used if you want the user to input a value.
prompt(text, defaultText)

Confirm:
The confirm() method displays a dialog box with a message, an OK button, and a Cancel button.
The confirm() method returns true if the user clicked "OK", otherwise false.

String Method:
string.chartAt(8);   // return char at given index position.
string.lastIndexOf('and') // return the index of last occurance of given string.
string.replace('a','b')   //replace a with b.
string.toUpperCase();
string.toLowerCase();
string.substring(0,4) //return substring staring from 0.4 is excluded.
string.slice(-5,4) //start with reverese position if value is negative.
string.split('-') //split string into array where - is placed.
sting.includes('hit')  // return T/F if given string is present .
string.trim() // remove white spaces.
str1.concat(str2); 

DOM(Document Object Model):
When a web page is loaded, browser creates a DOM of page.
The HTML DOM model is constructed as a tree of Objects.
Document-page
Object-Elements & attributes
Model:tree structures
innerHTML:useful for getting or replacing the content of HTML elements.
getElementById: method to access an HTML element using id of the element.

Changing HTML Elements
          Property	                           Description
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	        Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
          Method                           	Description
document.createElement(element)	        Create an HTML element
document.removeChild(element)	        Remove an HTML element
document.appendChild(element)	        Add an HTML element
document.replaceChild(new, old)	        Replace an HTML element
document.write(text)	                Write into the HTML output stream


DOM elements access method:
Finding HTML Elements
id: document.getElementById('id').innerHTML
tag:document.getElementsByTagName("p");
class:document.getElementByClassName('class')[index].innerHTML
CSS Selectors:document.querySelectorAll("p.intro");  //represent first child.


document.getElementById(id).onclick = function(){code}    //Adding event handler code to an onclick event

tag.firstChild;   //represent first child of given tag.
tag.lastChild;    //represent last child of given tag.
id.nextElementSibling;  //represent next sibling of given id/class/tag.
tag.parentNode;  //Parent of given tag.

Add new child in body.
var para=document.createElement('p');  //create paragrapgh element
var text=document.createTextNode('New paragraph created');  //create text to insert in para
para.appendChild(text);  //append text and para
document.body.appendChild(para); //append para in body of document.

css style in JS:
document.getElementById(id).style.color ="red"
setAttribute: to set multiplecss styles.
document.getElementById(id).setAttribute("style","color:red;background-color:black")

The Window Location Object:
The location object contains information about the current URL.
The location object is a property of the window object.
pathname 	Sets or returns the path name of a URL
port	        Sets or returns the port number of a URL
protocol	Sets or returns the protocol of a URL
hostname	Sets or returns the hostname of a URL
href	        Sets or returns the entire URL

The assign() method loads a new document.  
location.assign(URL)

The reload() method reloads the current document. 
 location.reload()

The replace() method replaces the current document with a new one.
With replace() it is not possible to navigate back to the original document.

Events:
onselect="myFunction()"   :occurs after some text has been selected.
onkeyup :the user releases a key
onkeydown:The user presses a key
onmouseout	The mouse pointer moves out of an element
onmouseover	The mouse pointer is moved over an element
ondblclick	The user double-clicks on an element

Date & Time:
var d = new Date();
month: starts from 0
var month=d.getUTCMonth()+1;
var year=d.getUTCFullYear();
var day=d.getUTCDate();

var hour=d.getHours();
var minute=d.getMinutes();
var second=d.getSeconds();

toLocaleTimeString() return the time portin of Date object as a string.
The setInterval() method calls a function at specified intervals (in milliseconds).
const myInterval = setInterval(myTimer, 1000);
clearInterval(myInterval);   //u can stop the execution by calling clearInterval()
The setTimeout() is executed only once.
Use the clearTimeout() method to prevent the function from starting.

Math:The JavaScript Math object allows you to perform mathematical tasks on numbers.
Math.PI : return 3.14
Math.round(4.8): return nearest rounded value.
Math.pow(x,y): value of x to the power of y.
Math.sqrt(25):square root
Math.abs(): return absolute positive value
Math.ceil(4.1):return rounded-up value. ans 5
Math.floor(4.9): return rounded-down value. ans 4
Math.min/max(1,2,3,4,5): return min/max number from list.
Math.random(): return random number between 0(incusive) and 1(exclusive).

Delete obj.property;   // To delete object property.

Primitive values are data that are stored on the stack.
Reference values are objects that are stored in the heap.
Therefore obj A={val:5}===obj B={val:5}  returns false.

 synchronous code will block further execution of the remaining code until it finishes the current one.Javascript is Synchronous and blocking in nature.
 Asynchronous code allows the program to be executed immediately.

A callback is a function passed as an argument to another function.

Callback Hell:
when callbacks are nested within other callbacks, the code becomes difficult to read and understand, leading to"callback hell".Design of the code seems just like a pyramid. Thus the Callback hell is also referred to as the ‘Pyramid of Doom’.

Promises:
JavaScript promises replaced callback functions and are now considered the effective method to handle asynchronous operations.
stages:pending,fulfilled,rejected.
let promise = new Promise(function(resolve, reject){
     //do something
});
.Promise then() Method: It is invoked when a promise is either resolved or rejected. 
.then(function(result){
        //handle success
}, function(error){
        //handle error
})
Parameters: It takes two functions as parameters.

The first function is executed if the promise is resolved and a result is received.
The second function is executed if the promise is rejected and an error is received. (It is optional and there is a better way to handle error using .catch() method.

2. Promise catch() Method: It is invoked when a promise is either rejected or some error has occurred in execution.
To fetch the data of reject function.

Async-Await:
async and await make promises easier to write.
The keyword async before a function makes ensure that the function return a promise.
The await keyword pause the execution of async function until the promise returns a result.
You can use await only inside of async functions.

let value = await promise;


async function myFunction() {
  return "Hello";
}
Is Same as 
function myFunction() {
  return Promise.resolve("Hello");
}

Fetch API:
Before AJAX, you had to re-render an entire web page even for minor updates.
Before JSON took over the world,XMLHttpRequest gave us the option to fetch XML data from the backend without reloading the entire page.
Fetch API works with promises, not callbacks.
Fetch API returns the promise that resolve the response of the request. Next you handle the responses with .then method.
fetch(url, options)
  .then((response) => response.json())       //response parameter access api data and .json convert json data to js object.
  .then((result) =>result)                   //print the actual data.
  .catch((error)=>error);                    //catch error.

POST method: 
HTTP requests allow front-end application to interact successfully with a back-end server or database which you can use to send data to a server.
let options={
method:'POST',
headers:{content-type:applicatin/json;}, 
body:JSON.stringify({                       //JSON.stringify convert json to string.
id:1,
name:'vrishabh'})
}

Fetch data using aysnc-await:
fetch() starts a request and returns a promise. When the request completes, the promise is resolved with the Response object.The asynchronous function is paused until the request completes.response.json() is a method of the Response object that allows a JSON object to be extracted from the response.

async function fetchData() {
  const response = await fetch('url');
  // waits until the request completes.

    if (!response.ok) {                  
    //response.ok is true if response.status is between 200-299 anf false for 404.
    const message = `An error has occured: ${response.status}`;
    throw new Error(message);   //use .catch to catch the error.
  }
  const result = await response.json();
  return result;
}

fetchData().then(result => {
  result; // fetched result
});

To perform parallel fetch requests use the Promise.all() helper function.
If any request fails, then the whole parallel promise gets rejected right away with the failed request error.
In case if you want all parallel requests to complete, despite any of them fail, consider using Promise.allSettled().

To cancel the fetch request, just call controller.abort() method.









